{"name":"payform","tagline":"A general purpose library for building credit card forms, validating inputs and formatting numbers.","body":"# payform\r\n\r\n[![Build Status](https://travis-ci.org/jondavidjohn/payform.svg?branch=master)](https://travis-ci.org/jondavidjohn/payform)\r\n![Dependencies](https://david-dm.org/jondavidjohn/payform.svg)\r\n\r\n[![NPM](https://nodei.co/npm/payform.png)](https://npmjs.org/package/payform)\r\n\r\nA general purpose library for building credit card forms, validating inputs, and formatting numbers.\r\n\r\nAvailable via **NPM** (Browserify compatible) and **Bower**.\r\n\r\nFor example, you can make a input act like a credit card field (with number formatting and length restriction):\r\n\r\n``` javascript\r\nvar input = document.getElementById('ccnum');\r\npayform.cardNumberInput(input);\r\n```\r\n\r\nThen, when the payment form is submitted, you can validate the card number on the client-side (or server-side):\r\n\r\n``` javascript\r\nvar valid = payform.validateCardNumber(input.value);\r\n\r\nif (!valid) {\r\n  alert('Your card is not valid!');\r\n  return false;\r\n}\r\n```\r\n\r\nSupported card types are:\r\n\r\n* Visa\r\n* MasterCard\r\n* American Express\r\n* Diners Club\r\n* Discover\r\n* UnionPay\r\n* JCB\r\n* Visa Electron\r\n* Maestro\r\n* Forbrugsforeningen\r\n* Dankort\r\n\r\n(Additional card types are supported by extending the [`payform.cards`](#paymentcards) array.)\r\n\r\n## API\r\n\r\n### `payform.validateCardNumber(number)`\r\n\r\nValidates a card number:\r\n\r\n* Validates numbers\r\n* Validates Luhn algorithm\r\n* Validates length\r\n\r\nExample:\r\n\r\n``` javascript\r\npayform.validateCardNumber('4242 4242 4242 4242'); //=> true\r\n```\r\n\r\n### `payform.validateCardExpiry(month, year)`\r\n\r\nValidates a card expiry:\r\n\r\n* Validates numbers\r\n* Validates in the future\r\n* Supports year shorthand\r\n\r\nExample:\r\n\r\n``` javascript\r\npayform.validateCardExpiry('05', '20'); //=> true\r\npayform.validateCardExpiry('05', '2015'); //=> true\r\npayform.validateCardExpiry('05', '05'); //=> false\r\n```\r\n\r\n### `payform.validateCardCVC(cvc, type)`\r\n\r\nValidates a card CVC:\r\n\r\n* Validates number\r\n* Validates length to 4\r\n\r\nExample:\r\n\r\n``` javascript\r\npayform.validateCardCVC('123'); //=> true\r\npayform.validateCardCVC('123', 'amex'); //=> true\r\npayform.validateCardCVC('1234', 'amex'); //=> true\r\npayform.validateCardCVC('12344'); //=> false\r\n```\r\n\r\n### `payform.parseCardType(number)`\r\n\r\nReturns a card type. Either:\r\n\r\n* `visa`\r\n* `mastercard`\r\n* `amex`\r\n* `dinersclub`\r\n* `discover`\r\n* `unionpay`\r\n* `jcb`\r\n* `visaelectron`\r\n* `maestro`\r\n* `forbrugsforeningen`\r\n* `dankort`\r\n\r\nThe function will return `null` if the card type can't be determined.\r\n\r\nExample:\r\n\r\n``` javascript\r\npayform.parseCardType('4242 4242 4242 4242'); //=> 'visa'\r\n```\r\n\r\n### `payform.parseCardExpiry(string)`\r\n\r\nParses a credit card expiry in the form of MM/YYYY, returning an object containing the `month` and `year`. Shorthand years, such as `13` are also supported (and converted into the longhand, e.g. `2013`).\r\n\r\n``` javascript\r\npayform.parseCardExpiry('03 / 2025'); //=> {month: 3: year: 2025}\r\npayform.parseCardExpiry('05 / 04'); //=> {month: 5, year: 2004}\r\n```\r\n\r\nThis function doesn't perform any validation of the month or year; use `payform.validateCardExpiry(month, year)` for that.\r\n\r\n### `payform.cards`\r\n\r\nArray of objects that describe valid card types. Each object should contain the following fields:\r\n\r\n``` javascript\r\n{\r\n  // Card type, as returned by payform.parseCardType.\r\n  type: 'mastercard',\r\n  // Regex used to identify the card type. For the best experience, this should be\r\n  // the shortest pattern that can guarantee the card is of a particular type.\r\n  pattern: /^5[0-5]/,\r\n  // Array of valid card number lengths.\r\n  length: [16],\r\n  // Array of valid card CVC lengths.\r\n  cvcLength: [3],\r\n  // Boolean indicating whether a valid card number should satisfy the Luhn check.\r\n  luhn: true,\r\n  // Regex used to format the card number. Each match is joined with a space.\r\n  format: /(\\d{1,4})/g\r\n}\r\n```\r\n\r\nWhen identifying a card type, the array is traversed in order until the card number matches a `pattern`. For this reason, patterns with higher specificity should appear towards the beginning of the array.\r\n\r\n## Browser `<input>` Helpers\r\n\r\nThese methods are specifically for use in the browser to attach `<input>` formatters.\r\n\r\n### `payform.cardNumberInput(input)`\r\n\r\nFormats card numbers:\r\n\r\n* Includes a space between every 4 digits\r\n* Restricts input to numbers\r\n* Limits to 16 numbers\r\n* Supports American Express formatting\r\n\r\nExample:\r\n\r\n``` javascript\r\nvar input = document.getElementById('ccnum');\r\npayform.cardNumberInput(input);\r\n```\r\n\r\n### `payform.expiryInput(input)`\r\n\r\nFormats card expiry:\r\n\r\n* Includes a `/` between the month and year\r\n* Restricts input to numbers\r\n* Restricts length\r\n\r\nExample:\r\n\r\n``` javascript\r\nvar input = document.getElementById('ccnum');\r\npayform.expiryInput(input);\r\n```\r\n\r\n### `payform.cvcInput(input)`\r\n\r\nFormats card CVC:\r\n\r\n* Restricts length to 4 numbers\r\n* Restricts input to numbers\r\n\r\nExample:\r\n\r\n``` javascript\r\nvar input = document.getElementById('ccnum');\r\npayform.cvcInput(input);\r\n```\r\n\r\n## Building\r\n\r\nRun `npm run build`\r\n\r\n## Running tests\r\n\r\nRun `npm test`\r\n\r\n## Autocomplete recommendations\r\n\r\nWe recommend you turn autocomplete on for credit card forms, except for the CVC field (which should never be stored). You can do this by setting the `autocomplete` attribute:\r\n\r\n``` html\r\n<form autocomplete=\"on\">\r\n  <input class=\"cc-number\">\r\n  <input class=\"cc-cvc\" autocomplete=\"off\">\r\n</form>\r\n```\r\n\r\nYou should also mark up your fields using the [Autofill spec](https://html.spec.whatwg.org/multipage/forms.html#autofill). These are respected by a number of browsers, including Chrome.\r\n\r\n``` html\r\n<input type=\"tel\" class=\"cc-number\" autocomplete=\"cc-number\">\r\n```\r\n\r\nSet `autocomplete` to `cc-number` for credit card numbers and `cc-exp` for credit card expiry.\r\n\r\n## Mobile recommendations\r\n\r\nWe recommend you to use `<input type=\"tel\">` which will cause the numeric keyboard to be displayed on mobile devices:\r\n\r\n``` html\r\n<input type=\"tel\" class=\"cc-number\">\r\n```\r\n\r\n## A Derived work\r\n\r\nThis library is derived from all the great work done on [`jquery.payment`](https://github.com/stripe/jquery.payment) by the folks at [Stripe](https://stripe.com/).  This aims to\r\nbuild upon that work, in a module that can be consumed more easily with node/npm/browserify and without dependencies.\r\n","google":"UA-38687719-2","note":"Don't delete this file! It's used internally to help with page regeneration."}